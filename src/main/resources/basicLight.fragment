#version 330 core

in vec2 texCoord;
in vec3 Normal;
in vec3 FragPos;


out vec4 color;

uniform vec3 u_Color;
uniform vec3 u_PlayerPos;
uniform vec3 u_Pos;
uniform sampler2D u_Tex;

void main(void){
    float specStrength = 0.5;
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * vec3(1.0,1.0,1.0);

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(u_Pos - FragPos);

    vec3 viewDir = normalize(u_PlayerPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);

    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specStrength * spec * vec3(1.0,1.0,1.0);

    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * vec3(1.0,1.0,1.0);
    vec3 res = (diffuse + ambient + specular) * u_Color;
    color = vec4(res, 1.0) * texture(u_Tex, texCoord);
}